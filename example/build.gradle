buildscript {
    repositories {
        maven {
            name 'jitpack'
            url 'https://jitpack.io'
        }
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:[1.2-1.4.6-SNAPSHOT,)'
    }
}

repositories {
    maven {
        name 'ProfMobius Repo'
        url 'http://mobiusstrip.eu/maven'
    }
    maven {
        name 'ChickenBones Repo'
        url 'https://chickenbones.net/maven/'
    }
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
}

apply plugin: 'forge'

def buildprop = new Properties()
file("build.properties").withInputStream { buildprop.load(it) }

version = buildprop.version
group = buildprop.group
// Your archive name must come before in alphabetical order the name of the archive you are patching
archivesBaseName = "[${buildprop.game_version}]-${buildprop.name}"

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

configurations {
    shade

    compile.extendsFrom(shade)
}

minecraft {
    version = "${buildprop.game_version}-${buildprop.forge_version}-${buildprop.game_version}"
    runDir = buildprop.run_dir
    replace '@VERSION@', project.version
}

dependencies {
    shade project(":library")
}

task devJar(type: Jar) {
    classifier('dev')
    from sourceSets.main.output
}

artifacts {
    archives devJar
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(Jar)*.doFirst {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    includeEmptyDirs = false
    if (name == "jar" || name == "devJar" || name == "sourcesJar") {
        manifest {
            // TODO: Don't forged about -Dfml.coreMods.load
            attributes "FMLCorePlugin": "${project.group}.example.ReflectorsExamplePlugin"
            attributes "FMLCorePluginContainsFMLMod": "true"
        }
        configurations.shade.each { dep ->
            from project.zipTree(dep)
        }
    }
}
